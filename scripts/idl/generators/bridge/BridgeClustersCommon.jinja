#pragma once

#include <new>

{%- for cluster in clusters %}
{%-   if cluster | dynamicCluster(idl) %}
#include "bridge/{{cluster.name}}.h"
{%-   endif %}
{%- endfor %}

namespace clusters {

struct ClusterInfo
{
  chip::ClusterId id;
  const char *name;
  uint16_t size;
  CommonCluster* (*ctor)(void*);
} static const kKnownClusters[] = {
{% for cluster in clusters %}
{%-   if cluster | dynamicCluster(idl) %}
  {
    {{cluster.code}},
    "{{cluster.name}}",
    sizeof({{cluster.name}}Cluster),
    [](void *mem) -> CommonCluster* {
      return new(mem) {{cluster.name}}Cluster();
    },
  },
{%-   endif %}
{%- endfor %}
};

inline void BridgeRegisterAllAttributeOverrides()
{
{% for cluster in clusters %}
{%-   if cluster | dynamicCluster(idl) %}
  static {{cluster.name}}Access {{cluster.name}};
  registerAttributeAccessOverride(&{{cluster.name}});
{%-   endif %}
{%- endfor %}
}

struct AttrInfo
{
  chip::ClusterId cluster;
  chip::AttributeId attr;
  const char *name;
} static const kKnownAttributes[] = {
{% for cluster in clusters %}
{%-   if cluster | dynamicCluster(idl) %}

{%-      for attr in cluster.attributes %}
  { {{cluster.code}}, {{attr.definition.code}}, "{{attr.definition.name | capitalcase}}" },
{%-      endfor  %}

{%-   endif %}
{%- endfor %}
};

}
